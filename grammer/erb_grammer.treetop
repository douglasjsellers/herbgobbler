grammar ERBGrammer
        rule erb
             ( 
               ignorable_javascript_tag /
               processing_instruction / 
               erb_string /
               erb_block  / 
               ignorable_script_tag_content /
               html_end_tag / 
               html_start_tag / 
               html_self_contained / 
               whitespace / 
               text 
             ) (erb)*
         end

        rule method_names             
             "link_to_function" / "link_to" / "button_to" <NonTextNode>
             {
                def node_name  
                    "method_names"
                end
                def can_be_combined?
                    true
                end
             }
        end

        rule comma
            "," <NonTextNode>
            {
                def node_name
                    "comma"
                end

                def can_be_combined?
                    true
                end

            }
        end 
       
        rule not_whitespace_or_comma
          ((!comma !space ) . )+ <NonTextNode>
          {
          
            def can_be_combined? 
               true
            end
          
            def node_name
              "not_whitespace_or_comma"
            end
          }
        end

        rule double_quoted_non_string
          '"' ( !'"' .)* '"' <NonTextNode>
          {
            def can_be_combined? 
               true
            end
          
            def node_name
              "double_quoted_non_string"
            end            
          }
        end

        rule single_quoted_non_string
          "'" ( !"'" .)* "'" <NonTextNode>
          {
            def can_be_combined? 
               true
            end
          
            def node_name
              "single_quoted_non_string"
            end            
          }
        end
          
        rule pluralize
          "pluralize"  space? "("? space? repetition:not_whitespace_or_comma space? comma space? string_to_pluralize:(single_quoted_non_string / double_quoted_non_string) space? ")"? space? <PluralizeNode>
          {
            def can_be_combined? 
               true
            end
          
            def node_name
              "pluralize"
            end
          }
        end

        rule method_call_content
             method_names whitespace ruby_string:(double_quoted_ruby_string / single_quoted_ruby_string) everything_else:(comma erb_string_non_text_content)? <MethodCallNode>
        end
       
        rule erb_string_non_text_content
             (!erb_block_end .)* <ErbStringNonTextContent>
             {
                def can_be_combined?
                    ( self.text_value.nil? || self.text_value.strip!.nil? || !self.text_value.strip!.match(/^render/) ) && !(/ do$/.match( self.text_value.strip ) )
                end                       
                                         
                def node_name
                   "erb_string_non_text_content"
                end
             }
        end

        rule erb_string
             start_erb:erb_string_start start_space:(space)? text:(method_call_content / double_quoted_ruby_string / single_quoted_ruby_string)? everything_else:(pluralize / erb_string_non_text_content) end_erb:(erb_block_end) <NonTextNode>
             {
                def node_name
                    "erb_string"
                end
             }

        end
        
        rule string_variable 
            '#{' variable:((!'}'  (pluralize / .))*) '}' <HerbStringVariable>
 
        end

        rule single_quoted_ruby_string
            start_quote:"'" unquoted_text:(( !"'" .)*) end_quote:"'"  <TextNode>
             {
                def can_be_combined?
                    false
                end
                
                def html?
                    false
                end 
                
                def text_value
                    self.unquoted_text.text_value
                end

                def node_name
                    "single_quoted_ruby_string"
                end
             }

        end

        rule double_quoted_ruby_string
        start_quote:'"' unquoted_text:((!'"' (string_variable / .))*) end_quote:'"' <DoubleQuotedTextNode>
             {
                def can_be_combined?
                    false
                end
                
                def html?
                    false
                end 
                
                def text_value
                    self.elements.inject("") { |text, node| text += node.text_value }
                end

                def node_name
                    "double_quoted_ruby_string"
                end
             }

        end

        rule processing_instruction
             '<!' ( !'>' .)+ '>' <NonTextNode>
             {
                def node_name
                    "processing_instruction"
                end

                def can_be_combined?
                    false
                end
             }
        end

        rule ignorable_javascript_tag
             not_combindable_erb_block_start whitespace* 'javascript_tag' (!(not_combindable_erb_block_start space 'end' space  not_combindable_erb_block_end) .)+ <IgnorableTagNode>
             {
                def can_be_combined?
                    false
                end

                def node_name
                   "ignorable_javascript_tag"
                end
             }

        end

        rule erb_block
             start_block:'<%' block_contents:((!erb_block_end .)*) end_block:not_combindable_erb_block_end <NonTextNode>
             {
                def node_name
                    "erb_block"
                end
             }

        end
        
        rule erb_string_start
           '<%=' <NonExtractingNonTextNode>
             {
                def node_name
                    "erb_string_start"
                end
                
                def can_be_combined?
                    true
                end
             }

        end

        rule not_combindable_erb_block_start
             ('<%-' / '<%') <NonTextNode>
             {
                def node_name
                    "not_combindable_erb_block_start"
                end

                def can_be_combined?
                    false
                end

             }

        end

        rule not_combindable_erb_block_end
             ('-%>' / '%>') <NonTextNode>
             {
                def node_name
                    "not_combindable_erb_block_end"
                end

                def can_be_combined?
                    false
                end

             }

        end
        
        rule erb_block_end
             ('%>' / '-%>') <NonExtractingNonTextNode>
             {
                def node_name
                    "erb_block_end"
                end

                def can_be_combined?
                    true
                end

             }

        end

        rule ignorable_script_tag_content
             '<script' (!'</script' .)+ <IgnorableTagNode>
             {
                def can_be_combined?
                    false
                end

                def node_name
                   "ignorable_tag_name"
                end
             }
        end



        rule html_self_contained
             start_tag:'<' tag_name:([a-zA-Z])+ tag_contents:(!'/>' (erb_string / .))* end_tag:'/>' <NonTextNode> 
             {
                def can_be_combined?
                   if( tag_name.text_value.downcase == 'br' )
                       false
                   else
                       true
                   end
                end

                def node_name
                    "html_self_contained"
                end

             }
        end     

        rule html_end_tag
             '</' tag_name:([a-zA-Z])+ (!'>' .)* '>' <NonTextNode>
             {
                def can_be_combined?
                    !(['a', 'b', 'span', 'strong'].index(tag_name.text_value.downcase).nil?)
                end

                def node_name
                    "html_end_tag"
                end
             }

        end
        
        rule tag_to_process
             ('title' space? '=' space? ('\'' / '"' ) text erb_string (!'\'' !'"' text)*  ('\'' / '"') space? ) <NonTextNode>
             {
               def node_name
                 "tag_to_process"
               end
             }
        end

        rule tag_text
            (!'>' ( tag_to_process / erb_block / erb_string / . ) )* <NonTextNode>
            {
               def node_name
                   "tag_text"
               end
            }
        end

        rule html_tag_greater_than
            '>' <NonTextNode>
            {
               def node_name
                   "html_tag_end_bracket"
               end
            }
        end

        rule html_start_tag
             start_bracket:'<'  tag_name:([a-zA-Z])+  extra_text:tag_text end_bracket:html_tag_greater_than <NonTextNode>
             {
                def can_be_combined?
                    !(['a', 'b', 'span','strong'].index(tag_name.text_value.downcase).nil?)
                end

                def node_name
                    "html_start_tag"
                end
             }

        end     

        rule text
             ((!html_self_contained !html_start_tag !html_end_tag !erb_string !erb_block) . )+ <TextNode>
             {
                def can_be_combined?
                    true
                end

                def node_name
                    "text"
                end
             }

        end

        rule space
           (' ')+ <NonTextNode>
           {
                      def node_name
                         "space"
                      end

                      def can_be_combined?
                          true
                      end                      
           }
        end
        
        rule whitespace
            ((![a-zA-Z\.] !('<' [a-zA-Z]+) !('</' [a-zA-Z]+) !'<%' !'"' !"'" !'<!' ) . )+ <NonTextNode>
            {
                def can_be_combined?
                   true
                end
               
               def node_name    
                    "whitespace"
               end

               def white_space?
                  true
               end
            }
        end
        
end
        